// MUSHclient.odl : type library source for MUSHclient.exe

// This file will be processed by the MIDL compiler to produce the
// type library (MUSHclient.tlb).

[ uuid(11DFC5E7-AD6F-11D0-8EAE-00A0247B3BFD), version(1.0) ]
library MUSHclient
{
	importlib("stdole32.tlb");
	

	//  Primary dispatch interface for CMUSHclientDoc
	
	[ uuid(11DFC5E8-AD6F-11D0-8EAE-00A0247B3BFD) ]
	dispinterface IMUSHclient
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CMUSHclientDoc)
			[id(6)] short NoteColour;
			[id(1)] short LogNotes;
			[id(2)] short LogInput;
			[id(7)] boolean Trace;
			[id(3)] short LogOutput;
			[id(8)] short SpeedWalkDelay;
			[id(4)] boolean Mapping;
			[id(5)] boolean RemoveMapReverses;
			[id(9)] long NoteColourFore;
			[id(10)] long NoteColourBack;
			[id(11)] boolean EchoInput;
			//}}AFX_ODL_PROP
			
		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CMUSHclientDoc)
			[id(12)] long GetLineCount();
			[id(13)] boolean IsConnected();
			[id(14)] BSTR WorldName();
			[id(15)] void Note(BSTR Message);
			[id(16)] long Send(BSTR Message);
			[id(17)] long Sound(BSTR SoundFileName);
			[id(18)] long DeleteTrigger(BSTR TriggerName);
			[id(19)] long AddTrigger(BSTR TriggerName, BSTR MatchText, BSTR ResponseText, long Flags, short Colour, short Wildcard, BSTR SoundFileName, BSTR ScriptName);
			[id(20)] long EnableTrigger(BSTR TriggerName, BOOL Enabled);
			[id(21)] long GetTrigger(BSTR TriggerName, VARIANT* MatchText, VARIANT* ResponseText, VARIANT* Flags, VARIANT* Colour, VARIANT* Wildcard, VARIANT* SoundFileName, VARIANT* ScriptName);
			[id(22)] long IsTrigger(BSTR TriggerName);
			[id(23)] VARIANT GetTriggerList();
			[id(24)] VARIANT GetVariable(BSTR VariableName);
			[id(25)] long SetVariable(BSTR VariableName, BSTR Contents);
			[id(26)] VARIANT GetVariableList();
			[id(27)] boolean Save(BSTR Name);
			[id(28)] long Connect();
			[id(29)] long Disconnect();
			[id(30)] long DeleteAlias(BSTR AliasName);
			[id(31)] long EnableAlias(BSTR AliasName, BOOL Enabled);
			[id(32)] long GetAlias(BSTR AliasName, VARIANT* MatchText, VARIANT* ResponseText, VARIANT* Parameter, VARIANT* Flags, VARIANT* ScriptName);
			[id(33)] VARIANT GetAliasList();
			[id(34)] long IsAlias(BSTR AliasName);
			[id(35)] long CloseLog();
			[id(36)] long OpenLog(BSTR LogFileName, BOOL Append);
			[id(37)] long WriteLog(BSTR Message);
			[id(38)] boolean IsLogOpen();
			[id(39)] long EnableTimer(BSTR TimerName, BOOL Enabled);
			[id(40)] long AddAlias(BSTR AliasName, BSTR MatchText, BSTR ResponseText, long Flags, BSTR ScriptName);
			[id(41)] long DeleteVariable(BSTR VariableName);
			[id(42)] void ResetTimers();
			[id(43)] void SetStatus(BSTR Message);
			[id(44)] long SetCommand(BSTR Message);
			[id(45)] BSTR GetNotes();
			[id(46)] void SetNotes(BSTR Message);
			[id(413), propget] long NormalColour(short WhichColour);
			[id(413), propput] void NormalColour(short WhichColour, long nNewValue);
			[id(414), propget] long BoldColour(short WhichColour);
			[id(414), propput] void BoldColour(short WhichColour, long nNewValue);
			[id(415), propget] long CustomColourText(short WhichColour);
			[id(415), propput] void CustomColourText(short WhichColour, long nNewValue);
			[id(416), propget] long CustomColourBackground(short WhichColour);
			[id(416), propput] void CustomColourBackground(short WhichColour, long nNewValue);
			[id(47)] void Redraw();
			[id(48)] long ResetTimer(BSTR TimerName);
			[id(49)] void SetOutputFont(BSTR FontName, short PointSize);
			[id(50)] void SetInputFont(BSTR FontName, short PointSize, short Weight, BOOL Italic);
			[id(51)] boolean SendToNotepad(BSTR Title, BSTR Contents);
			[id(52)] boolean AppendToNotepad(BSTR Title, BSTR Contents);
			[id(53)] boolean ActivateNotepad(BSTR Title);
			[id(54)] void Activate();
			[id(55)] IDispatch* GetWorld(BSTR WorldName);
			[id(56)] VARIANT GetWorldList();
			[id(57)] BSTR FixupHTML(BSTR StringToConvert);
			[id(58)] BSTR Replace(BSTR Source, BSTR SearchFor, BSTR ReplaceWith, BOOL Multiple);
			[id(59)] BSTR FixupEscapeSequences(BSTR Source);
			[id(60)] BSTR Trim(BSTR Source);
			[id(61)] boolean ReplaceNotepad(BSTR Title, BSTR Contents);
			[id(62)] VARIANT GetAliasInfo(BSTR AliasName, short InfoType);
			[id(63)] VARIANT GetTriggerInfo(BSTR TriggerName, short InfoType);
			[id(64)] BSTR EvaluateSpeedwalk(BSTR SpeedWalkString);
			[id(65)] BSTR ReverseSpeedwalk(BSTR SpeedWalkString);
			[id(66)] long DeleteTimer(BSTR TimerName);
			[id(67)] long IsTimer(BSTR TimerName);
			[id(68)] VARIANT GetTimerList();
			[id(69)] long GetTimer(BSTR TimerName, VARIANT* Hour, VARIANT* Minute, VARIANT* Second, VARIANT* ResponseText, VARIANT* Flags, VARIANT* ScriptName);
			[id(70)] VARIANT GetTimerInfo(BSTR TimerName, short InfoType);
			[id(71)] long GetUniqueNumber();
			[id(72)] long Queue(BSTR Message, BOOL Echo);
			[id(73)] long DiscardQueue();
			[id(74)] VARIANT GenerateName();
			[id(75)] long ReadNamesFile(BSTR FileName);
			[id(76)] long AddToMapper(BSTR Direction, BSTR Reverse);
			[id(77)] long GetMappingCount();
			[id(78)] VARIANT GetMappingItem(long Item);
			[id(79)] VARIANT GetMappingString();
			[id(80)] long DeleteLastMapItem();
			[id(81)] long DeleteAllMapItems();
			[id(82)] long GetSentBytes();
			[id(83)] long GetReceivedBytes();
			[id(84)] long GetConnectDuration();
			[id(85)] double GetScriptTime();
			[id(86)] BSTR WorldAddress();
			[id(87)] long WorldPort();
			[id(88)] void DeleteCommandHistory();
			[id(89)] void DeleteOutput();
			[id(90)] void Tell(BSTR Message);
			[id(91)] void NoteColourRGB(long Foreground, long Background);
			[id(92)] void NoteColourName(BSTR Foreground, BSTR Background);
			[id(93)] BSTR Version();
			[id(94)] void Reset();
			[id(95)] long GetOption(BSTR OptionName);
			[id(96)] VARIANT GetOptionList();
			[id(97)] long SetOption(BSTR OptionName, long Value);
			[id(98)] VARIANT Debug(BSTR Command);
			[id(99)] void Pause(BOOL Flag);
			[id(100)] IDispatch* Open(BSTR FileName);
			[id(101)] VARIANT GetLineInfo(long LineNumber, short InfoType);
			[id(102)] long GetLinesInBufferCount();
			[id(103)] VARIANT GetStyleInfo(long LineNumber, long StyleNumber, short InfoType);
			[id(104)] long GetSelectionStartLine();
			[id(105)] long GetSelectionEndLine();
			[id(106)] long GetSelectionStartColumn();
			[id(107)] long GetSelectionEndColumn();
			[id(108)] VARIANT GetCommandList(long Count);
			[id(109)] BSTR PushCommand();
			[id(110)] void SelectCommand();
			[id(111)] BSTR GetCommand();
			[id(112)] long AddTriggerEx(BSTR TriggerName, BSTR MatchText, BSTR ResponseText, long Flags, short Colour, short Wildcard, BSTR SoundFileName, BSTR ScriptName, short SendTo, short Sequence);
			[id(113)] VARIANT GetQueue();
			[id(114)] long DeleteTemporaryTriggers();
			[id(115)] long DeleteTemporaryAliases();
			[id(116)] long DeleteTemporaryTimers();
			[id(117)] VARIANT GetInfo(long InfoType);
			[id(118)] VARIANT GetAlphaOptionList();
			[id(119)] long SetAlphaOption(BSTR OptionName, BSTR Value);
			[id(120)] VARIANT GetAlphaOption(BSTR OptionName);
			[id(121)] long ColourNameToRGB(BSTR Name);
			[id(122)] BSTR RGBColourToName(long Colour);
			[id(123)] VARIANT Base64Decode(BSTR Text);
			[id(124)] VARIANT Base64Encode(BSTR Text, BOOL MultiLine);
			[id(125)] VARIANT GetLoadedValue(BSTR OptionName);
			[id(126)] VARIANT GetDefaultValue(BSTR OptionName);
			[id(127)] VARIANT GetCurrentValue(BSTR OptionName);
			[id(128)] void ColourNote(BSTR TextColour, BSTR BackgroundColour, BSTR Text);
			[id(129)] void ColourTell(BSTR TextColour, BSTR BackgroundColour, BSTR Text);
			[id(130)] BSTR CreateGUID();
			[id(131)] BSTR Hash(BSTR Text);
			[id(132)] BSTR GetUniqueID();
			[id(133)] VARIANT GetPluginVariable(BSTR PluginID, BSTR VariableName);
			[id(134)] BSTR GetPluginID();
			[id(135)] VARIANT GetPluginList();
			[id(136)] VARIANT GetPluginInfo(BSTR PluginID, short InfoType);
			[id(137)] long LoadPlugin(BSTR FileName);
			[id(138)] VARIANT GetPluginVariableList(BSTR PluginID);
			[id(139)] VARIANT GetPluginTriggerList(BSTR PluginID);
			[id(140)] VARIANT GetPluginAliasList(BSTR PluginID);
			[id(141)] VARIANT GetPluginTimerList(BSTR PluginID);
			[id(142)] VARIANT GetPluginTriggerInfo(BSTR PluginID, BSTR TriggerName, short InfoType);
			[id(143)] VARIANT GetPluginAliasInfo(BSTR PluginID, BSTR AliasName, short InfoType);
			[id(144)] VARIANT GetPluginTimerInfo(BSTR PluginID, BSTR TimerName, short InfoType);
			[id(145)] boolean IsPluginInstalled(BSTR PluginID);
			[id(146)] long SaveState();
			[id(147)] long CallPlugin(BSTR PluginID, BSTR Routine, BSTR Argument);
			[id(148)] long PluginSupports(BSTR PluginID, BSTR Routine);
			[id(149)] long EnablePlugin(BSTR PluginID, BOOL Enabled);
			[id(150)] BSTR GetPluginName();
			[id(151)] long LogSend(BSTR Message);
			[id(152)] long AddMapperComment(BSTR Comment);
			[id(153)] long SendPush(BSTR Message);
			[id(154)] long EnableGroup(BSTR GroupName, BOOL Enabled);
			[id(155)] long EnableTriggerGroup(BSTR GroupName, BOOL Enabled);
			[id(156)] long EnableAliasGroup(BSTR GroupName, BOOL Enabled);
			[id(157)] long EnableTimerGroup(BSTR GroupName, BOOL Enabled);
			[id(158)] void ShowInfoBar(BOOL Visible);
			[id(159)] void Info(BSTR Message);
			[id(160)] void InfoFont(BSTR FontName, short Size, short Style);
			[id(161)] long DeleteGroup(BSTR GroupName);
			[id(162)] long DeleteTriggerGroup(BSTR GroupName);
			[id(163)] long DeleteAliasGroup(BSTR GroupName);
			[id(164)] long DeleteTimerGroup(BSTR GroupName);
			[id(165)] void InfoClear();
			[id(166)] void InfoColour(BSTR Name);
			[id(167)] void InfoBackground(BSTR Name);
			[id(168)] VARIANT GetTriggerOption(BSTR TriggerName, BSTR OptionName);
			[id(169)] long SetTriggerOption(BSTR TriggerName, BSTR OptionName, BSTR Value);
			[id(170)] VARIANT GetAliasOption(BSTR AliasName, BSTR OptionName);
			[id(171)] VARIANT GetTimerOption(BSTR TimerName, BSTR OptionName);
			[id(172)] long SetAliasOption(BSTR AliasName, BSTR OptionName, BSTR Value);
			[id(173)] long SetTimerOption(BSTR TimerName, BSTR OptionName, BSTR Value);
			[id(174)] long SaveNotepad(BSTR Title, BSTR FileName, BOOL ReplaceExisting);
			[id(175)] long CloseNotepad(BSTR Title, BOOL QuerySave);
			[id(176)] BSTR GetEntity(BSTR Name);
			[id(177)] long Execute(BSTR Command);
			[id(178)] long ChatCall(BSTR Server, long Port);
			[id(179)] void AnsiNote(BSTR Text);
			[id(180)] long ChatNameChange(BSTR NewName);
			[id(181)] long ChatAcceptCalls(short Port);
			[id(182)] void ChatStopAcceptingCalls();
			[id(183)] VARIANT GetChatList();
			[id(184)] VARIANT GetChatInfo(long ChatID, short InfoType);
			[id(185)] long ChatEverybody(BSTR Message, BOOL Emote);
			[id(186)] long ChatPersonal(BSTR Who, BSTR Message, BOOL Emote);
			[id(187)] long ChatID(long ID, BSTR Message, BOOL Emote);
			[id(188)] long ChatGroup(BSTR Group, BSTR Message, BOOL Emote);
			[id(189)] long ChatPing(long ID);
			[id(190)] long ChatPeekConnections(long ID);
			[id(191)] long ChatRequestConnections(long ID);
			[id(192)] long ChatDisconnect(long ID);
			[id(193)] long ChatMessage(long ID, short Message, BSTR Text);
			[id(194)] BSTR ANSI(short Code);
			[id(195)] BSTR StripANSI(BSTR Message);
			[id(196)] VARIANT GetChatOption(long ID, BSTR OptionName);
			[id(197)] long SetChatOption(long ID, BSTR OptionName, BSTR Value);
			[id(198)] void ChatNote(short NoteType, BSTR Message);
			[id(199)] long ChatGetID(BSTR Who);
			[id(200)] long ChatDisconnectAll();
			[id(201)] long ChatPasteText(long ID);
			[id(202)] long ChatSendFile(long ID, BSTR FileName);
			[id(203)] long ChatStopFileTransfer(long ID);
			[id(204)] long ChatPasteEverybody();
			[id(205)] VARIANT GetWorldIdList();
			[id(206)] IDispatch* GetWorldById(BSTR WorldID);
			[id(207)] BSTR GetHostName(BSTR IPaddress);
			[id(208)] VARIANT GetHostAddress(BSTR HostName);
			[id(209)] BSTR GetClipboard();
			[id(210)] long ImportXML(BSTR XML);
			[id(211)] long DoCommand(BSTR Command);
			[id(212)] VARIANT GetInternalCommandsList();
			[id(213)] long ChatCallzChat(BSTR Server, long Port);
			[id(214)] long GetNotepadLength(BSTR Title);
			[id(215)] BSTR GetNotepadText(BSTR Title);
			[id(216)] long SendImmediate(BSTR Message);
			[id(217)] long AdjustColour(long Colour, short Method);
			[id(218)] long SendNoEcho(BSTR Message);
			[id(219)] BSTR ExportXML(short Type, BSTR Name);
			[id(220)] void Hyperlink(BSTR Action, BSTR Text, BSTR Hint, BSTR TextColour, BSTR BackColour, BOOL URL);
			[id(221)] void NoteStyle(short Style);
			[id(222)] short GetNoteStyle();
			[id(223)] long GetFrame();
			[id(224)] long ArrayCreate(BSTR Name);
			[id(225)] long ArrayDelete(BSTR Name);
			[id(226)] VARIANT ArrayListAll();
			[id(227)] long ArrayImport(BSTR Name, BSTR Values, BSTR Delimiter);
			[id(228)] VARIANT ArrayGet(BSTR Name, BSTR Key);
			[id(229)] long ArraySet(BSTR Name, BSTR Key, BSTR Value);
			[id(230)] VARIANT ArrayExport(BSTR Name, BSTR Delimiter);
			[id(231)] VARIANT ArrayListKeys(BSTR Name);
			[id(232)] long ArrayClear(BSTR Name);
			[id(233)] long ArrayDeleteKey(BSTR Name, BSTR Key);
			[id(234)] boolean ArrayExists(BSTR Name);
			[id(235)] boolean ArrayKeyExists(BSTR Name, BSTR Key);
			[id(236)] VARIANT ArrayExportKeys(BSTR Name, BSTR Delimiter);
			[id(237)] long ArrayCount();
			[id(238)] long ArraySize(BSTR Name);
			[id(239)] VARIANT ArrayGetFirstKey(BSTR Name);
			[id(240)] VARIANT ArrayGetLastKey(BSTR Name);
			[id(241)] VARIANT ArrayListValues(BSTR Name);
			[id(242)] void ResetStatusTime();
			[id(243)] void EnableMapping(BOOL Enabled);
			[id(244)] void ActivateClient();
			[id(245)] BSTR RemoveBacktracks(BSTR Path);
			[id(246)] VARIANT GetTriggerWildcard(BSTR TriggerName, BSTR WildcardName);
			[id(247)] BSTR GetRecentLines(long Count);
			[id(248)] VARIANT GetAliasWildcard(BSTR AliasName, BSTR WildcardName);
			[id(249)] long ReloadPlugin(BSTR PluginID);
			[id(250)] BSTR TranslateGerman(BSTR Text);
			[id(251)] BSTR GetWorldID();
			[id(252)] long Accelerator(BSTR Key, BSTR Send);
			[id(253)] VARIANT AcceleratorList();
			[id(254)] void MapColour(long Original, long Replacement);
			[id(255)] VARIANT SpellCheck(BSTR Text);
			[id(256)] long GetMapColour(long Which);
			[id(257)] VARIANT MapColourList();
			[id(258)] BSTR MakeRegularExpression(BSTR Text);
			[id(259)] long SpellCheckCommand(long StartCol, long EndCol);
			[id(260)] void MoveMainWindow(long Left, long Top, long Width, long Height);
			[id(261)] void MoveWorldWindow(long Left, long Top, long Width, long Height);
			[id(262)] long MoveNotepadWindow(BSTR Title, long Left, long Top, long Width, long Height);
			[id(263)] long GetSysColor(long Index);
			[id(264)] long GetSystemMetrics(long Index);
			[id(265)] BSTR GetMainWindowPosition();
			[id(266)] BSTR GetWorldWindowPosition();
			[id(267)] BSTR GetNotepadWindowPosition(BSTR Title);
			[id(268)] long UdpSend(BSTR IP, short Port, BSTR Text);
			[id(269)] long UdpListen(BSTR IP, short Port, BSTR Script);
			[id(270)] long NotepadColour(BSTR Title, BSTR TextColour, BSTR BackgroundColour);
			[id(271)] long NotepadFont(BSTR Title, BSTR FontName, short Size, short Style, short Charset);
			[id(272)] void MtSrand(long Seed);
			[id(273)] double MtRand();
			[id(274)] void SetChanged(BOOL ChangedFlag);
			[id(275)] VARIANT UdpPortList();
			[id(276)] long AddTimer(BSTR TimerName, short Hour, short Minute, double Second, BSTR ResponseText, long Flags, BSTR ScriptName);
			[id(277)] long DoAfter(double Seconds, BSTR SendText);
			[id(278)] long DoAfterNote(double Seconds, BSTR NoteText);
			[id(279)] long DoAfterSpeedWalk(double Seconds, BSTR SendText);
			[id(280)] long DoAfterSpecial(double Seconds, BSTR SendText, short SendTo);
			[id(281)] void NoteHr();
			[id(282)] void MoveWorldWindowX(long Left, long Top, long Width, long Height, short Which);
			[id(283)] BSTR GetWorldWindowPositionX(short Which);
			[id(284)] void SetEntity(BSTR Name, BSTR Contents);
			[id(285)] BSTR GetXMLEntity(BSTR Entity);
			[id(286)] long GetUdpPort(long First, long Last);
			[id(287)] void SetClipboard(BSTR Text);
			[id(288)] long BroadcastPlugin(long Message, BSTR Text);
			[id(289)] long PickColour(long Suggested);
			[id(290)] void TraceOut(BSTR Message);
			[id(291)] BSTR ErrorDesc(long Code);
			[id(292)] BSTR PasteCommand(BSTR Text);
			[id(293)] void Help(BSTR Name);
			[id(294)] void Simulate(BSTR Text);
			[id(295)] void ResetIP();
			[id(296)] long AddSpellCheckWord(BSTR OriginalWord, BSTR ActionCode, BSTR ReplacementWord);
			[id(297)] long OpenBrowser(BSTR URL);
			[id(298)] void DeleteLines(long Count);
			[id(299)] boolean NotepadSaveMethod(BSTR Title, short Method);
			[id(300)] long ChangeDir(BSTR Path);
			[id(301)] long SendPkt(BSTR Packet);
			[id(302)] BSTR Metaphone(BSTR Word, short Length);
			[id(303)] long EditDistance(BSTR Source, BSTR Target);
			[id(304)] long FlushLog();
			[id(305)] boolean Transparency(long Key, short Amount);
			[id(306)] VARIANT SpellCheckDlg(BSTR Text);
			[id(307)] void SetWorldWindowStatus(short Parameter);
			[id(308)] BSTR GetCustomColourName(short WhichColour);
			[id(309)] long SetCustomColourName(short WhichColour, BSTR Name);
			[id(310)] VARIANT GetNotepadList(BOOL All);
			[id(311)] long TranslateDebug(BSTR Message);
			[id(312)] long SendSpecial(BSTR Message, BOOL Echo, BOOL Queue, BOOL Log, BOOL History);
			[id(313)] VARIANT GetGlobalOption(BSTR Name);
			[id(314)] VARIANT GetGlobalOptionList();
			[id(315)] VARIANT GetPluginTriggerOption(BSTR PluginID, BSTR TriggerName, BSTR OptionName);
			[id(316)] VARIANT GetPluginAliasOption(BSTR PluginID, BSTR AliasName, BSTR OptionName);
			[id(317)] VARIANT GetPluginTimerOption(BSTR PluginID, BSTR TimerName, BSTR OptionName);
			[id(318)] long AcceleratorTo(BSTR Key, BSTR Send, short SendTo);
			[id(319)] long StopSound(short Buffer);
			[id(320)] long GetSoundStatus(short Buffer);
			[id(321)] long PlaySound(short Buffer, BSTR FileName, BOOL Loop, double Volume, double Pan);
			[id(322)] long SetCommandWindowHeight(short Height);
			[id(323)] long SetToolBarPosition(short Which, BOOL Float, short Side, long Top, long Left);
			[id(324)] long ShiftTabCompleteItem(BSTR Item);
			[id(325)] long NotepadReadOnly(BSTR Title, BOOL ReadOnly);
			[id(326)] long AddFont(BSTR PathName);
			[id(327)] long SetBackgroundImage(BSTR FileName, short Mode);
			[id(328)] long SetForegroundImage(BSTR FileName, short Mode);
			[id(329)] long SetBackgroundColour(long Colour);
			[id(330)] long WindowRectOp(BSTR Name, short Action, long Left, long Top, long Right, long Bottom, long Colour1, long Colour2);
			[id(331)] long WindowShow(BSTR Name, BOOL Show);
			[id(332)] long WindowTextWidth(BSTR Name, BSTR FontId, BSTR Text, BOOL Unicode);
			[id(333)] VARIANT WindowFontInfo(BSTR Name, BSTR FontId, long InfoType);
			[id(334)] long WindowLine(BSTR Name, long x1, long y1, long x2, long y2, long PenColour, long PenStyle, long PenWidth);
			[id(335)] long WindowArc(BSTR Name, long Left, long Top, long Right, long Bottom, long x1, long y1, long x2, long y2, long PenColour, long PenStyle, long PenWidth);
			[id(336)] VARIANT WindowList();
			[id(337)] VARIANT WindowFontList(BSTR Name);
			[id(338)] VARIANT WindowInfo(BSTR Name, long InfoType);
			[id(339)] long WindowLoadImage(BSTR Name, BSTR ImageId, BSTR FileName);
			[id(340)] VARIANT WindowImageList(BSTR Name);
			[id(341)] long WindowText(BSTR Name, BSTR FontId, BSTR Text, long Left, long Top, long Right, long Bottom, long Colour, BOOL Unicode);
			[id(342)] long WindowDrawImage(BSTR Name, BSTR ImageId, long Left, long Top, long Right, long Bottom, short Mode, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom);
			[id(343)] VARIANT WindowImageInfo(BSTR Name, BSTR ImageId, long InfoType);
			[id(344)] long GetDeviceCaps(long Index);
			[id(345)] long WindowBezier(BSTR Name, BSTR Points, long PenColour, long PenStyle, long PenWidth);
			[id(346)] long WindowCreate(BSTR Name, long Left, long Top, long Width, long Height, short Position, long Flags, long BackgroundColour);
			[id(347)] long WindowPosition(BSTR Name, long Left, long Top, short Position, long Flags);
			[id(348)] long WindowDeleteHotspot(BSTR Name, BSTR HotspotId);
			[id(349)] VARIANT WindowHotspotList(BSTR Name);
			[id(350)] long WindowDeleteAllHotspots(BSTR Name);
			[id(351)] VARIANT WindowHotspotInfo(BSTR Name, BSTR HotspotId, long InfoType);
			[id(352)] long WindowPolygon(BSTR Name, BSTR Points, long PenColour, long PenStyle, long PenWidth, long BrushColour, long BrushStyle, BOOL Close, BOOL Winding);
			[id(353)] long WindowAddHotspot(BSTR Name, BSTR HotspotId, long Left, long Top, long Right, long Bottom, BSTR MouseOver, BSTR CancelMouseOver, BSTR MouseDown, BSTR CancelMouseDown, BSTR MouseUp, BSTR TooltipText, long Cursor, long Flags);
			[id(354)] long WindowCircleOp(BSTR Name, short Action, long Left, long Top, long Right, long Bottom, long PenColour, long PenStyle, long PenWidth, long BrushColour, long BrushStyle, long Extra1, long Extra2, long Extra3, long Extra4);
			[id(355)] long WindowCreateImage(BSTR Name, BSTR ImageId, long Row1, long Row2, long Row3, long Row4, long Row5, long Row6, long Row7, long Row8);
			[id(356)] long WindowImageOp(BSTR Name, short Action, long Left, long Top, long Right, long Bottom, long PenColour, long PenStyle, long PenWidth, long BrushColour, BSTR ImageId, long EllipseWidth, long EllipseHeight);
			[id(357)] long WindowFont(BSTR Name, BSTR FontId, BSTR FontName, double Size, BOOL Bold, BOOL Italic, BOOL Underline, BOOL Strikeout, short Charset, short PitchAndFamily);
			[id(358)] long WindowBlendImage(BSTR Name, BSTR ImageId, long Left, long Top, long Right, long Bottom, short Mode, double Opacity, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom);
			[id(359)] long WindowImageFromWindow(BSTR Name, BSTR ImageId, BSTR SourceWindow);
			[id(360)] void Repaint();
			[id(361)] long TextRectangle(long Left, long Top, long Right, long Bottom, long BorderOffset, long BorderColour, long BorderWidth, long OutsideFillColour, long OutsideFillStyle);
			[id(362)] long WindowGradient(BSTR Name, long Left, long Top, long Right, long Bottom, long StartColour, long EndColour, short Mode);
			[id(363)] long WindowFilter(BSTR Name, long Left, long Top, long Right, long Bottom, short Operation, double Options);
			[id(364)] long WindowSetPixel(BSTR Name, long x, long y, long Colour);
			[id(365)] long WindowGetPixel(BSTR Name, long x, long y);
			[id(366)] long WindowWrite(BSTR Name, BSTR FileName);
			[id(367)] long FilterPixel(long Pixel, short Operation, double Options);
			[id(368)] long BlendPixel(long Blend, long Base, short Mode, double Opacity);
			[id(369)] long WindowMergeImageAlpha(BSTR Name, BSTR ImageId, BSTR MaskId, long Left, long Top, long Right, long Bottom, short Mode, double Opacity, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom);
			[id(370)] long WindowDelete(BSTR Name);
			[id(371)] BSTR WindowMenu(BSTR Name, long Left, long Top, BSTR Items);
			[id(372)] long SetCommandSelection(long First, long Last);
			[id(373)] long WindowDragHandler(BSTR Name, BSTR HotspotId, BSTR MoveCallback, BSTR ReleaseCallback, long Flags);
			[id(374)] long SetCursor(long Cursor);
			[id(375)] long DatabaseClose(BSTR Name);
			[id(376)] long DatabasePrepare(BSTR Name, BSTR Sql);
			[id(377)] long DatabaseFinalize(BSTR Name);
			[id(378)] long DatabaseColumns(BSTR Name);
			[id(379)] long DatabaseStep(BSTR Name);
			[id(380)] BSTR DatabaseError(BSTR Name);
			[id(381)] BSTR DatabaseColumnName(BSTR Name, long Column);
			[id(382)] long DatabaseColumnType(BSTR Name, long Column);
			[id(383)] BSTR DatabaseColumnText(BSTR Name, long Column);
			[id(384)] VARIANT DatabaseColumnValue(BSTR Name, long Column);
			[id(385)] long DatabaseOpen(BSTR Name, BSTR Filename, long Flags);
			[id(386)] long DatabaseTotalChanges(BSTR Name);
			[id(387)] long DatabaseChanges(BSTR Name);
			[id(388)] BSTR DatabaseLastInsertRowid(BSTR Name);
			[id(389)] VARIANT DatabaseList();
			[id(390)] VARIANT DatabaseInfo(BSTR Name, long InfoType);
			[id(391)] long DatabaseExec(BSTR Name, BSTR Sql);
			[id(392)] VARIANT DatabaseColumnNames(BSTR Name);
			[id(393)] VARIANT DatabaseColumnValues(BSTR Name);
			[id(394)] long DatabaseReset(BSTR Name);
			[id(395)] void FlashIcon();
			[id(396)] long WindowHotspotTooltip(BSTR Name, BSTR HotspotId, BSTR TooltipText);
			[id(397)] long WindowDrawImageAlpha(BSTR Name, BSTR ImageId, long Left, long Top, long Right, long Bottom, double Opacity, long SrcLeft, long SrcTop);
			[id(398)] long WindowGetImageAlpha(BSTR Name, BSTR ImageId, long Left, long Top, long Right, long Bottom, long SrcLeft, long SrcTop);
			[id(399)] long WindowScrollwheelHandler(BSTR Name, BSTR HotspotId, BSTR MoveCallback);
			[id(400)] long WindowResize(BSTR Name, long Width, long Height, long BackgroundColour);
			[id(401)] long WindowMoveHotspot(BSTR Name, BSTR HotspotId, long Left, long Top, long Right, long Bottom);
			[id(402)] long WindowTransformImage(BSTR Name, BSTR ImageId, float Left, float Top, short Mode, float Mxx, float Mxy, float Myx, float Myy);
			[id(403)] long SetScroll(long Position, BOOL Visible);
			[id(404)] BSTR Menu(BSTR Items, BSTR Default);
			[id(405)] VARIANT DatabaseGetField(BSTR Name, BSTR Sql);
			[id(406)] long WindowSetZOrder(BSTR Name, long Order);
			[id(407)] long UnloadPlugin(BSTR PluginID);
			[id(408)] void Bookmark(long LineNumber, BOOL Set);
			[id(409)] void SetTitle(BSTR Title);
			[id(410)] void SetMainTitle(BSTR Title);
			[id(411)] void StopEvaluatingTriggers(BOOL AllPlugins);
			[id(412)] void SetUnseenLines(long Counter);
			//}}AFX_ODL_METHOD

	};

	//  Class information for CMUSHclientDoc
	
	[ uuid(11DFC5E6-AD6F-11D0-8EAE-00A0247B3BFD) ]
	coclass World
	{
		[default] dispinterface IMUSHclient;
	};

	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
